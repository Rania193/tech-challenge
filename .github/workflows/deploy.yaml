name: CI/CD Pipeline
on:
  push:
    branches: [main]
    tags: [release/*]
permissions:    
  id-token: write   # This is required for receiving the JWT  
  contents: write    # This is required for actions/checkout 
jobs:
  # validate-terraform:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.7.4
  #     - name: Terraform Init
  #       run: |
  #         cd terraform
  #         terraform init
  #     - name: Terraform Validate
  #       run: |
  #         cd terraform
  #         terraform validate
  build-and-push:
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && (matrix.environment.name == 'dev' || startsWith(github.ref, 'refs/tags/release/'))
    # needs: validate-terraform
    strategy:
      matrix:
        environment:
          - name: dev
            namespace: dev
            aws-role: arn:aws:iam::905317844123:role/kantox-challenge-github-actions-dev
            values-file: values-dev.yaml
          - name: prod
            namespace: prod
            aws-role: arn:aws:iam::905317844123:role/kantox-challenge-github-actions-dev  # Same role for testing
            values-file: values-prod.yaml
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags
      - name: Check Conditions and Exit if Not Applicable
        run: |
          echo "Debug: github.event_name=${{ github.event_name }}"
          echo "Debug: matrix.environment.name=${{ matrix.environment.name }}"
          echo "Debug: startsWith(github.ref, 'refs/tags/release/')=${{ startsWith(github.ref, 'refs/tags/release/') }}"
          SHOULD_RUN=true
          if [ "${{ github.event_name }}" != "push" ]; then
            echo "Skipping: Not a push event."
            SHOULD_RUN=false
          elif [ "${{ matrix.environment.name }}" != "dev" ] && [ "${{ matrix.environment.name }}" != "prod" ]; then
            echo "Skipping: Not a valid environment (dev or prod)."
            SHOULD_RUN=false
          elif [ "${{ matrix.environment.name }}" == "prod" ] && [ "${{ startsWith(github.ref, 'refs/tags/release/') }}" != "true" ]; then
            echo "Skipping: Prod requires a release tag."
            SHOULD_RUN=false
          fi
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
      - name: Set Environment
        if: steps.check-conditions.outputs.should_run == 'true'
        run: echo "Running for environment ${{ matrix.environment.name }}"

      - name: Configure AWS Credentials
        if: steps.check-conditions.outputs.should_run == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ matrix.environment.aws-role }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        if: steps.check-conditions.outputs.should_run == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set Image Tag
        if: steps.check-conditions.outputs.should_run == 'true'
        id: set-tag
        run: |
          if [[ ${{ matrix.environment.name }} == 'prod' && ${{ startsWith(github.ref, 'refs/tags/release/') }} == 'true' ]]; then
            TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\/release\///')
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
      - name: Build and Push Main API
        if: steps.check-conditions.outputs.should_run == 'true'
        run: |
          echo "Building Main API image for ${{ matrix.environment.name }} with tag ${{ steps.set-tag.outputs.tag }}..."
          docker build -t ${{ steps.login-ecr.outputs.registry }}/main-api:${{ steps.set-tag.outputs.tag }} ./main-api
          echo "Pushing Main API image..."
          docker push ${{ steps.login-ecr.outputs.registry }}/main-api:${{ steps.set-tag.outputs.tag }}
      - name: Build and Push Auxiliary Service
        if: steps.check-conditions.outputs.should_run == 'true'
        run: |
          echo "Building Auxiliary Service image for ${{ matrix.environment.name }} with tag ${{ steps.set-tag.outputs.tag }}..."
          docker build -t ${{ steps.login-ecr.outputs.registry }}/auxiliary-service:${{ steps.set-tag.outputs.tag }} ./auxiliary-service
          echo "Pushing Auxiliary Service image..."
          docker push ${{ steps.login-ecr.outputs.registry }}/auxiliary-service:${{ steps.set-tag.outputs.tag }}
      - name: Install yq
        if: steps.check-conditions.outputs.should_run == 'true'
        run: |
          sudo snap install yq
      - name: Update Helm Values for Dev - Auxiliary Service
        if: steps.check-conditions.outputs.should_run == 'true'
        run: |
          echo "Updating Auxiliary Service Helm values for ${{ matrix.environment.values-file }} with tag ${{ steps.set-tag.outputs.tag }}..."
          yq e -i '.image.tag = "${{ steps.set-tag.outputs.tag }}"' myhelmcharts/charts/auxiliary-service/${{ matrix.environment.values-file }}
          yq e -i '.version = "${{ steps.set-tag.outputs.tag }}"' myhelmcharts/charts/auxiliary-service/${{ matrix.environment.values-file }}
      - name: Update Helm Values for Dev - Main API
        if: steps.check-conditions.outputs.should_run == 'true'
        run: |
          echo "Updating Main API Helm values for ${{ matrix.environment.values-file }} ..."
          yq e -i '.image.tag = "${{ steps.set-tag.outputs.tag }}"' myhelmcharts/charts/main-api/${{ matrix.environment.values-file }}
          yq e -i '.version = "${{ steps.set-tag.outputs.tag }}"' myhelmcharts/charts/main-api/${{ matrix.environment.values-file }}
      - name: Commit and Push Changes
        if: steps.check-conditions.outputs.should_run == 'true'
        run: |
          echo "Committing updated manifests..."
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add myhelmcharts/charts/
          git commit -m "Update Helm ${{ matrix.environment.values-file }} for ${{ matrix.environment.name }} with version ${{ steps.set-tag.outputs.tag }}" || echo "No changes to commit"
          git push