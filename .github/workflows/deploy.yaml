name: CI/CD Pipeline
on:
  push:
    branches:
      - main
      - 'feature/*'
    tags:
      - 'release/*'

permissions:    
  id-token: write   # This is required for receiving the JWT 
  contents: write    # This is required for actions/checkout 
env:
  CHARTS_DIR: myhelmcharts/charts
jobs:
  # validate-terraform:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.7.4
  #     - name: Terraform Init
  #       run: |
  #         cd terraform
  #         terraform init
  #     - name: Terraform Validate
  #       run: |
  #         cd terraform
  #         terraform validate
  build-and-push:
    runs-on: ubuntu-latest
    # needs: validate-terraform
    strategy:
      matrix:
        environment:
          - name: dev
            namespace: dev
            aws-role: arn:aws:iam::905317844123:role/kantox-challenge-github-actions-dev
            values-file: values-dev.yaml
          - name: prod
            namespace: prod
            aws-role: arn:aws:iam::905317844123:role/kantox-challenge-github-actions-dev  # Same role for testing
            values-file: values-prod.yaml
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags

       # ─── Gate: dev on feature, prod on main or release tags ───────────────

      - name: Gate dev vs prod
        id: gate
        run: |
          REF="$GITHUB_REF"
          SHOULD_RUN=false

          if [[ "${{ matrix.environment.name }}" == "dev" ]] && \
             [[ "$REF" =~ ^refs/heads/feature/ ]]; then
            SHOULD_RUN=true

          elif [[ "${{ matrix.environment.name }}" == "prod" ]] && \
               ( [[ "$REF" == "refs/heads/main" ]] || [[ "$REF" =~ ^refs/tags/release/ ]] ); then
            SHOULD_RUN=true
          fi

          echo "should_run=$SHOULD_RUN" >> "$GITHUB_OUTPUT"

      - name: Log gate result
        run: echo "→ Gate for ${{ matrix.environment.name }} on $GITHUB_REF = ${{ steps.gate.outputs.should_run }}"

      - name: Configure AWS Credentials
        if: steps.gate.outputs.should_run == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ matrix.environment.aws-role }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        if: steps.gate.outputs.should_run == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set Image Tag
        if: steps.gate.outputs.should_run == 'true'
        id: set-tag
        run: |
          REF="$GITHUB_REF"
          if [[ "${{ matrix.environment.name }}" == "prod" ]] && [[ "$REF" =~ ^refs/tags/release/(.+)$ ]]; then
            TAG="${REF#refs/tags/release/}"
          else
            TAG="${GITHUB_SHA}"
          fi
          echo "Determined tag = $TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
      - name: Build and Push Docker images
        if: steps.gate.outputs.should_run == 'true'
        run: |
          for svc in main-api auxiliary-service; do
            docker build -t ${{ steps.login-ecr.outputs.registry }}/$svc:${{ steps.set-tag.outputs.tag }} ./$svc
            docker push ${{ steps.login-ecr.outputs.registry }}/$svc:${{ steps.set-tag.outputs.tag }}
          done
      - name: Install yq
        if: steps.gate.outputs.should_run == 'true'
        run: |
          sudo snap install yq
      - name: Debug tree
        run: |
          echo "PWD=$(pwd)"
          ls -R | head
          tree -L 3 myhelmcharts/charts/auxiliary-service || true

      - name: Bump Helm values
        if: steps.gate.outputs.should_run == 'true'
        run: |
          for svc in auxiliary-service main-api; do
            file="${CHARTS_DIR}/${svc}/values-${{ matrix.environment.name }}.yaml"
            echo "Updating $file to tag ${{ steps.set-tag.outputs.tag }}"
            yq e ".image.tag = \"${{ steps.set-tag.outputs.tag }}\" | .version = \"${{ steps.set-tag.outputs.tag }}\"" "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

      - name: Commit & push chart bumps
        if: steps.gate.outputs.should_run == 'true'
        run: |
          git config user.name  "GitHub Action"
          git config user.email "action@github.com"
          git add "$CHARTS_DIR"
          git commit -m "ci(${{ matrix.environment.name }}): bump charts to ${{ steps.set-tag.outputs.tag }}" || echo "No changes to commit"
          # Push back to the same branch (main or feature/*)
          TARGET_BRANCH="${GITHUB_REF#refs/heads/}"
          # If this was a release tag build, push to main
          if [[ "$GITHUB_REF" =~ ^refs/tags/release/ ]]; then
            TARGET_BRANCH="main"
          fi
          git push origin HEAD:"$TARGET_BRANCH"